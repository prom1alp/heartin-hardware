#include        "msp430x54xA.h"
#include        "serialprot.h"
#include        "register.h"
#include        "main.h"
#include        "adc.h"
#define         TXBufSize             512
;________________________________________________________________________________________________________________
EXTERN          DeviceTypeVer
EXTERN          DeviceMode
EXTERN          DeviceEvent
EXTERN          GeneratorOn
EXTERN          GeneratorOff
EXTERN          ADCOn
EXTERN          ADCOff
EXTERN          Mode1FilterSize
EXTERN          Mode1Filter
EXTERN          Mode2FilterSize
EXTERN          Mode2Filter
EXTERN          Mode3FilterSize
EXTERN          Mode3Filter
EXTERN          BTMAC
EXTERN          DeviceInfo
EXTERN          WriteInfoMemoryBlock
EXTERN          Battery
;________________________________________________________________________________________________________________
EXPORT          SetupUSB
EXPORT          USB_RX_Rutine
EXPORT          USBMode
EXPORT          USBModeTX
EXPORT          USBSampleCount
EXPORT          USBADCCount
EXPORT          USBADCCountEnd
EXPORT          USBFilerSize
EXPORT          USBFiler
EXPORT          SendUSBPacket
EXPORT          USB_Voltage_Rutine
;################################################################################################################
                RSEG                  DATA16_N                        ;сегмент данных
;________________________________________________________________________________________________________________
TX_Empty        DS                    2                               ;признак опустошения буфера передачи
TXBufInPnt      DS                    2                               ;указатель на буфер
TXBufOutPnt     DS                    2                               ;указатель на буфер
TXBuffer        DS                    TXBufSize                       ;буфер передачи
RXBufInPnt      DS                    2                               ;указатель на буфер
RXBufOutPnt     DS                    2                               ;указатель на буфер
RXBuffer        DS                    RXBufSize                       ;буфер приема
RXCount         DS                    2                               ;счетчик приема
RXError         DS                    2                               ;признак ошибки
BOFPrizn        DS                    2                               ;признак BOF в пакете
TogleStatus     DS                    2                               ;признак тогле
PacketBuffer    DS                    MaxCommandSize                  ;буфер принятого пакета
USBMode         DS                    2                               ;режим работы USB
USBModeTX       DS                    2                               ;признак пакета при передачеданных
USBSampleCount  DS                    2                               ;сетчик переданных отсчетов
USBADCCount     DS                    2                               ;счетчик прореживания USB
USBADCCountEnd  DS                    2                               ;прореживание USB
USBFilerSize    DS                    2                               ;размер фильтра
USBFiler        DS                    2                               ;указатель на коэффициенты фильтра
;################################################################################################################
                RSEG                  CODE                            ;сегмент кода программы
;________________________________________________________________________________________________________________
USB_Voltage_Rutine;обработка изменения питания по USB вызывается 10 раз в секунду
                _TEST_MODE_           USBConnect
                jnz                   TestUSBDiscon
                bit.b                 #0x08,&P1IN                     ;проверяем включение
                jnz                   PowerConnect
                ret
PowerConnect    ;обрабатываем подключение питания
                _SET_MODE_            USBConnect                      ;ставим режим
                call                  #GeneratorOn                    ;включаем генератор
                bic.b                 #UCSWRST,&UCA1CTL1              ;включаем порт
                bis.b                 #0xC0,&P5SEL                    ;RX и TX как переферия
                bis.b                 #UCRXIE+UCTXIE,&UCA1IE          ;разрешаем прерывания RX и TX
                mov.w                 #1,&Battery+2                   ;признак питания
                ret
TestUSBDiscon   bit.b                 #0x08,&P1IN                     ;проверяем отключение
                jz                    PowerDisconnect
                ret
PowerDisconnect ;отрабатываем отключение питания
                _RESET_MODE_          USBConnect                      ;сбрасываем режим
                bic.b                 #UCRXIE+UCTXIE,&UCA1IE          ;запрет прерываний RX и TX
                bis.b                 #UCSWRST,&UCA1CTL1              ;выключаем порт
                bic.b                 #0xC0,&P5SEL                    ;RX и TX как GPIO
                mov.w                 #TXBuffer,&TXBufInPnt           ;начальное значение указателей
                mov.w                 #TXBuffer,&TXBufOutPnt
                mov.w                 #RXBuffer,&RXBufInPnt
                mov.w                 #RXBuffer,&RXBufOutPnt
                ;инициализация переменных
                clr.w                 &RXCount                        ;сброс счетчика приема
                clr.w                 &RXError                        ;сброс признака ошибки
                clr.w                 &BOFPrizn                       ;сброс признака BOF в пакете
                clr.w                 &TogleStatus                    ;сброс тогле
                clr.w                 &TX_Empty                       ;сброс признака опустошения буфера передачи
                clr.w                 &USBMode                        ;сбрасываем режим
                clr.w                 &Battery+2                      ;признак питания
                call                  #ADCOff                         ;выключаем АЦП
                call                  #GeneratorOff                   ;выключаем генератор
                ret
;________________________________________________________________________________________________________________
SendUSBPacket    ;передача пакета по USB
;REG1 - признак пакета
;REG2 - количество данных
;REG3 - указатель на данные
                mov.w                 &TXBufInPnt,REG5                ;указатель на данные
                _INIT_CRC_                                            ;инициализация CRC
                _BYTE_TO_TXBUF_       #BOF                            ;BOF
                _ADD_CRC_             REG1                            ;признак
                _BYTE_TO_TXBUF_       REG1
                tst.w                 REG2                            ;проверяем наличие данных в пакета
                jz                    SendBEPacketCRC
SendUSBPacByte  mov.b                 @REG3+,REG4
                _ADD_CRC_             REG4                            ;данные
                _DATA_TO_TXBUF_       REG4
                dec.w                 REG2
                jnz                   SendUSBPacByte
SendBEPacketCRC _MOV_CRC_             REG1                            ;LB CRC 
                _DATA_TO_TXBUF_       REG1
                _MOV_CRC_             REG1                            ;HB CRC
                swpb                  REG1
                _DATA_TO_TXBUF_       REG1
                _BYTE_TO_TXBUF_       #EOF                            ;EOF
                mov.w                 REG5,&TXBufInPnt                ;сохраняем указатель на данные
                call                  #InitTX                         ;инициализируем передачу
                ret
;________________________________________________________________________________________________________________
SetupUSB        ;начальная инициализация USB
                mov.w                 #TXBuffer,&TXBufInPnt           ;начальное значение указателей
                mov.w                 #TXBuffer,&TXBufOutPnt
                mov.w                 #RXBuffer,&RXBufInPnt
                mov.w                 #RXBuffer,&RXBufOutPnt
                ;инициализация переменных
                clr.w                 &RXCount                        ;сброс счетчика приема
                clr.w                 &RXError                        ;сброс признака ошибки
                clr.w                 &BOFPrizn                       ;сброс признака BOF в пакете
                clr.w                 &TogleStatus                    ;сброс тогле
                clr.w                 &TX_Empty                       ;сброс признака опустошения буфера передачи
                clr.w                 &USBMode                        ;сбрасываем режим
                ;инициализация UCA1
                mov.b                 #0,&UCA1CTL0                    ;режим
                mov.b                 #UCSSEL_3+UCSWRST,&UCA1CTL1     ;SMCLK + reset
                mov.w                 #26,&UCA1BRW                    ;460800 от 12.288МГц (2.5%)
                mov.b                 #UCBRS_7,&UCA1MCTL              ;модуляция 0.7 (-0.12%)
                mov.b                 #0,&UCA1STAT                    ;режим
                ret
;________________________________________________________________________________________________________________
InitTX          ;инициализация передачи данных
                tst.w                 &TX_Empty
                jnz                   NeedInitTX
                ret
NeedInitTX      cmp.w                 &TXBufInPnt,&TXBufOutPnt        ;проверяем наличие данных
                jeq                   NoNeedInit
                mov.w                 &TXBufOutPnt,REG1
                mov.b                 @REG1+,REG2                     ;читаем данные
                cmp.w                 #TXBuffer+TXBufSize,REG1        ;проверка на выход за границу буфера
                jlo                   NoInitTXBufBrd
                mov.w                 #TXBuffer,REG1
NoInitTXBufBrd  mov.w                 REG1,&TXBufOutPnt
                clr.w                 &TX_Empty
                mov.b                 REG2,&UCA1TXBUF
NoNeedInit      ret
;________________________________________________________________________________________________________________
USCI_A1_Rutine  ;обработка прерывания COM порта
                add.w                 &UCA1IV,PC                      ;определем прерывание
                reti                                                  ;no interrupt
                jmp                   USCI_A1_RX_ISR                  ;RXIFG
                jmp                   USCI_A1_TX_ISR                  ;TXIFG
;________________________________________________________________________________________________________________
USCI_A1_RX_ISR  ;прерывание на прием данных от USB
                bic.w                 #LPM3,0(SP)                     ;просыпаемся
                _SET_EVENT_           USB_RX_Event                    ;ставим событие
                push.w                REG1
                mov.w                 &RXBufInPnt,REG1                ;адрес в буфере
                mov.b                 &UCA1RXBUF,0(REG1)              ;читаем данные
                inc.w                 REG1                            ;инкремент указателя
                cmp.w                 #RXBuffer+RXBufSize,REG1        ;проверка на выход за границу буфера
                jlo                   NoRXIntBufBoard
                mov.w                 #RXBuffer,REG1
NoRXIntBufBoard mov.w                 REG1,&RXBufInPnt                ;сохраняем указатель
                pop.w                 REG1
                reti
;________________________________________________________________________________________________________________
USCI_A1_TX_ISR  ;перрывание на передачу данных по USB
                cmp.w                 &TXBufInPnt,&TXBufOutPnt        ;проверяем наличие данных
                jne                   IsDataTX
                mov.w                 #1,&TX_Empty                    ;ставим признак опустошения буфера
                reti
IsDataTX        push.w                REG1 
                mov.w                 &TXBufOutPnt,REG1
                mov.b                 @REG1+,&UCA1TXBUF
                cmp.w                 #TXBuffer+TXBufSize,REG1        ;проверка на выход за границу буфера
                jlo                   NoTXBufBrd
                mov.w                 #TXBuffer,REG1
NoTXBufBrd      mov.w                 REG1,&TXBufOutPnt   
                pop.w                 REG1
                reti
;________________________________________________________________________________________________________________
USB_RX_Rutine    ;обработка принятых данных
                dint
                cmp.w                 &RXBufOutPnt,&RXBufInPnt        ;проверем наличие данных
                jne                   IsRXData
                _CLEAR_EVENT_         USB_RX_Event                    ;сброс события
                eint
                ret
IsRXData        eint  
                ;проверка обработка принтых данных
                mov.w                 &RXBufOutPnt,REG1               ;адрес обработанных данных
                mov.b                 @REG1+,REG2                     ;заносим символ из буфера
                cmp.w                 #RXBuffer+RXBufSize,REG1        ;проверем на выход указател за границы буфера
                jlo                   NoRXBufBoard
                mov.w                 #RXBuffer,REG1
NoRXBufBoard    mov.w                 REG1,&RXBufOutPnt               ;сохранем указатель
                ;проверем на BOF
                cmp.b                 #BOF,REG2                       
                jne                   NoBOF
                ;обрабатываем BOF
                clr.w                 &RXCount                        ;сброс счетчика приема
                clr.w                 &RXError                        ;сброс признака ошибки
                mov.w                 #1,&BOFPrizn                    ;признак BOF в пакете
                clr.w                 &TogleStatus                    ;сброс тогле
                clr.w                 &RXCount                        ;сброс счетчика приема
                ret
                ;проверем на EOF
NoBOF           cmp.b                 #EOF,REG2                       
                jne                   NoEOF
                ;обрабатываем EOF
                cmp.w                 #1,&BOFPrizn                    ;проверем что был BOF
                jne                   PaketError
                cmp.w                 #0,&RXError                     ;проверем что не было ошибки
                jne                   PaketError
                call                  #ValidRXPacket                  ;обрабатываем принтый пакет
                clr.w                 &BOFPrizn                       ;сброс признака BOF в пакете
                clr.w                 &TogleStatus                    ;сброс тогле
                clr.w                 &RXError                        ;сброс признака ошибки
                ret
PaketError      call                  #SendErrorPacket                
                ret
NoEOF           ;обрабатываем байт данных
                cmp.w                 #0,&BOFPrizn                    ;если не было BOF - выходим
                jne                   IsBOFValid
                ret
IsBOFValid      cmp.w                 #0,&RXError                     ;если была ошибка - выходим
                jeq                   IsNoError
                ret
IsNoError       cmp.b                 #TOGLE,REG2                     ;проверем на тогле
                jne                   NoTOGLE
                mov.w                 #1,&TogleStatus                 ;ставим признак TOGLE
                ret
NoTOGLE         cmp.w                 #0,&TogleStatus                 ;проверем что предыдущий не был TOGLE
                jeq                   NoNeedTogle
                xor.b                 #TOGLEBYTE,REG2                 ;делаем TOGLE
                clr.w                 &TogleStatus                    ;сбрасываем TOGLE
NoNeedTogle     mov.w                 #PacketBuffer,REG3              ;указатель на буфер команды
                mov.w                 &RXCount,REG4                   ;количество принтых байт
                add.w                 REG4,REG3                       ;указатель на данные в буфере
                mov.b                 REG2,0(REG3)                    ;соранем символ в буфере
                inc.w                 REG4                            ;увеличиваем количество принтых байт
                mov.w                 REG4,&RXCount                   ;сохранем количество принтых байт
                cmp.w                 #MaxCommandSize,REG4            ;проверем что превысили размер пакета
                jhs                   MaxPackEroor
                ret
MaxPackEroor    ;обрабатываем ошибку превышени размера пакета
                mov.w                 #1,&RXError                     ;ставим признак ошибки
                ret
;________________________________________________________________________________________________________________
ValidRXPacket   ;обработка принятого пакета
                call                  #TestCRC
                tst.w                 REG1
                jnz                   IsValidCRC
                call                  #SendErrorPacket                ;передаем ошибку
                ret
IsValidCRC      mov.w                 #PacketBuffer,REG1              ;указатель на пакет
                cmp.b                 #SENDDEVREADY,0(REG1)           ;проверяем что запрос READY
                jeq                   ReadyPacket
                cmp.b                 #SENDDEVTYPE,0(REG1)           ;проверяем что запрос DevType
                jeq                   TypePacket
                cmp.b                 #SETMODE0,0(REG1)               ;проверем что пакет режим 0
                jeq                   SetMode0Packet
                cmp.b                 #SETMODE1,0(REG1)               ;проверем что пакет режим 1
                jeq                   SetMode1Packet
                cmp.b                 #SETMODE2,0(REG1)               ;проверем что пакет режим 2
                jeq                   SetMode2Packet
                cmp.b                 #SETMODE3,0(REG1)               ;проверем что пакет режим 3
                jeq                   SetMode3Packet
                cmp.b                 #SENDBTMAC,0(REG1)              ;проверем что пакет запроса MAC
                jeq                   SendMAC
                cmp.b                 #SENDDEVDATA,0(REG1)            ;проверем что пакет запроса служебных данных
                jeq                   SendDevData
                cmp.b                 #SETDEVDATA,0(REG1)             ;проверем что пакет записи служебных данных
                jeq                   SetDevData
                cmp.b                 #GETBATTERY,0(REG1)             ;проверем что пакет заряда батареи
                jeq                   SendBattery
                call                  #SendNotSupportMode
                ret
;________________________________________________________________________________________________________________
ReadyPacket     ;обработка запроса пакета готовности
                _CALL_3DATA_          SendUSBPacket,#SENDDEVREADY,#0,#0;передаем готовность
                ret
;________________________________________________________________________________________________________________
TypePacket      ;обработка запроса - тип прибора
                _CALL_3DATA_          SendUSBPacket,#SENDDEVTYPE,#4,#DeviceTypeVer;передаем тип и версию 
                ret
;________________________________________________________________________________________________________________
SetMode0Packet  ;устанавливаем режим 0
                cmp.w                 #3,&RXCount                     ;проверем длину пакета
                jeq                   IsSetMode0
                call                  #SendErrorPacket                ;передаем ошибку
                ret
IsSetMode0      clr.w                 &USBMode                        ;режим 0
                _CALL_3DATA_          SendUSBPacket,#SETMODE0,#0,#0   ;передаем режим 0
                call                  #ADCOff                         ;выключаем питание
                ret
;________________________________________________________________________________________________________________
SetMode1Packet  ;устанавливам режим 1
                cmp.w                 #3,&RXCount                     ;проверем длину пакета
                jeq                   IsSetMode1
                call                  #SendErrorPacket                ;передаем ошибку
                ret
IsSetMode1      mov.w                 #1,&USBMode                     ;режим 1
                mov.w                 #SETMODE1,&USBModeTX            ;признак пакета при передаче
                clr.w                 &USBSampleCount                 ;сброс счетчика переданных отсетов
                clr.w                 &USBADCCount                    ;сброс счетчика прореживания USB
                mov.w                 #Mode1Count,&USBADCCountEnd     ;прореживание
                mov.w                 &Mode1FilterSize,&USBFilerSize  ;размер фильтра
                mov.w                 #Mode1Filter,&USBFiler          ;указатель на коэффициенты фильтра
                call                  #ADCOn                          ;включаем питание
                ret
;________________________________________________________________________________________________________________
SetMode2Packet  ;устанавливам режим 2
                cmp.w                 #3,&RXCount                     ;проверем длину пакета
                jeq                   IsSetMode2
                call                  #SendErrorPacket                ;передаем ошибку
                ret
IsSetMode2      mov.w                 #2,&USBMode                     ;режим 2
                mov.w                 #SETMODE2,&USBModeTX            ;признак пакета при передаче
                clr.w                 &USBSampleCount                 ;сброс счетчика переданных отсетов
                clr.w                 &USBADCCount                    ;сброс счетчика прореживания USB
                mov.w                 #Mode2Count,&USBADCCountEnd     ;прореживание
                mov.w                 &Mode2FilterSize,&USBFilerSize  ;размер фильтра
                mov.w                 #Mode2Filter,&USBFiler          ;указатель на коэффициенты фильтра
                call                  #ADCOn                          ;включаем питание
                ret
;________________________________________________________________________________________________________________
SetMode3Packet  ;устанавливам режим 3
                cmp.w                 #3,&RXCount                     ;проверем длину пакета
                jeq                   IsSetMode3
                call                  #SendErrorPacket                ;передаем ошибку
                ret
IsSetMode3      mov.w                 #3,&USBMode                     ;режим 3
                mov.w                 #SETMODE2,&USBModeTX            ;признак пакета при передаче
                clr.w                 &USBSampleCount                 ;сброс счетчика переданных отсетов
                clr.w                 &USBADCCount                    ;сброс счетчика прореживания USB
                mov.w                 #Mode3Count,&USBADCCountEnd     ;прореживание
                mov.w                 &Mode3FilterSize,&USBFilerSize  ;размер фильтра
                mov.w                 #Mode3Filter,&USBFiler          ;указатель на коэффициенты фильтра
                call                  #ADCOn                          ;включаем питание
                ret
;________________________________________________________________________________________________________________
SendMAC         ;запрос MAC
                cmp.w                 #3,&RXCount                     ;проверем длину пакета
                jeq                   IsSendMAC
                call                  #SendErrorPacket                ;передаем ошибку
                ret
IsSendMAC       _CALL_3DATA_          SendUSBPacket,#SENDBTMAC,#BTMACSize,#BTMAC;передаем MAC
                ret
;________________________________________________________________________________________________________________
SendDevData     ;запрос служебных данных
                cmp.w                 #3,&RXCount                     ;проверем длину пакета
                jeq                   IsSendDevData
                call                  #SendErrorPacket                ;передаем ошибку
                ret
IsSendDevData   _CALL_3DATA_          SendUSBPacket,#SENDDEVDATA,#DevDataSize,#DeviceInfo;передаем служебные данные
                ret
;________________________________________________________________________________________________________________
SetDevData      ;запись служебных данных
                cmp.w                 #3+DevDataSize,&RXCount         ;проверем длину пакета
                jeq                   IsSetDevData
                call                  #SendErrorPacket                ;передаем ошибку
                ret
IsSetDevData    mov.w                 #DeviceInfo,REG2                ;проверяем что служебные данные стерты
                mov.w                 #DevDataSize,REG3
TestDevData     cmp.b                 #0xFF,0(REG2)
                jne                   NoWriteDevData
                inc.w                 REG2
                dec.w                 REG3
                jnz                   TestDevData
                inc.w                 REG1                            ;указатель на данные
                mov.w                 #DeviceInfo,REG2                ;куда
                mov.w                 #DevDataSize,REG3               ;и сколько писать
                call                  #WriteInfoMemoryBlock           ;пишем
NoWriteDevData  _CALL_3DATA_          SendUSBPacket,#SENDDEVDATA,#DevDataSize,#DeviceInfo;передаем служебные данные
                ret
;________________________________________________________________________________________________________________
SendBattery     ;запрос заряда батареии
                cmp.w                 #3,&RXCount                     ;проверем длину пакета
                jeq                   IsSendBattery
                call                  #SendErrorPacket                ;передаем ошибку
                ret
IsSendBattery   _CALL_3DATA_          SendUSBPacket,#GETBATTERY,#4,#Battery;передаем заряд батареи
                ret
;________________________________________________________________________________________________________________
TestCRC         ;тест контрольной суммы     REG1=1 - OK  
                mov.w                 #PacketBuffer,REG1              ;указатель на пакет
                mov.w                 &RXCount,REG2                   ;длина пакета
                cmp.w                 #3,REG2                         ;если длина меньше 3 - ошибка
                jlo                   TestCRCError
                decd.w                REG2                            ;уменьшаем размер пакета на 2
                _INIT_CRC_
MakeCRC         mov.b                 @REG1+,REG3
                _ADD_CRC_             REG3
                dec.w                 REG2
                jnz                   MakeCRC
                mov.b                 @REG1+,REG3                     ;LSB CRC
                mov.b                 @REG1+,REG4                     ;MSB CRC
                _MOV_CRC_             REG5
                cmp.b                 REG3,REG5                       ;сравнение LB CRC
                jne                   TestCRCError
                swpb                  REG5
                cmp.b                 REG4,REG5                       ;сравнение HB CRC
                jne                   TestCRCError
                mov.w                 #1,REG1
                ret
TestCRCError    clr.w                 REG1
                ret
;________________________________________________________________________________________________________________
SendErrorPacket ;передача - ошибочный пакет
                _CALL_3DATA_          SendUSBPacket,#SENDERRORPACKET,#0,#0
                ret
;________________________________________________________________________________________________________________
SendNotSupportMode ;передача, что принят не поддерживаемый пакет
                _CALL_3DATA_          SendUSBPacket,#SENDERRORMODE,#0,#0
                ret
;################################################################################################################
                COMMON                INTVEC                          ;сегмент векторов прерываний
;________________________________________________________________________________________________________________
                ORG                   USCI_A1_VECTOR                  ;0xFFDC USCI A1 Receive/Transmit
                DW                    USCI_A1_Rutine
;################################################################################################################
                END
